Builder HTML API
Explore the power of server-side pre-rendering and seamless integration with any tech stack using the Builder HTML API.

To experiment with the HTML API, check out the Builder API Explorer, which works with your own Builder content. The following video shows an example of using the API Explorer:

The following is an example of a request and response:

https://cdn.builder.io/api/v3/html/YOUR_MODEL_NAME?apiKey=YOUR_API_KEY&url=PAGE_URL

# Example response
# {
#   "id": "c923kd89",
#   "name": "About page",
#   "data: {
#     "html": "<div data-builder-component="banner-ad"><div class="builder-blocks"><h1>Hello!</h1></div></builder-div>"
#   }
# }

Tip: Custom components work in all of Builder's supported frameworks except for the HTML API.

Query params
Name	Required	Description
apiKey

Yes

Your Public API key

url

No

The current URL of the visitor on your site.

?url=https://your-site.com/about?foo=bar

includeUnpublished

No

Set to true to include unpublished content in your API response; for example, testing.

query.*

No

Mongodb-style query of your data.

&query.data.id=abc123
&query.data.myCustomField=someValue
&query.data.someNumber.$ne=20
fields

No

Only include these fields.

&fields=id,name,data.customField
omit

No

Omit only these fields.

&omit=data.bigField,data.blocks
userAttributes.*

No

Optionally use this to send targeting attributes.

&userAttributes.device=desktop
&userAttributes.locale=en_us
cacheSeconds

No

Seconds to cache content (sets the max-age of the cache-control header response header). Set the value higher for better performance and lower for content that changes more frequently.

&cacheSeconds=120
sort

No

Order results by a given property. Set to 1 for ascending order and -1 for descending order.


&sort.data.customField=1
Previewing content on your site
As you work, it is essential to preview the content you build on your actual site. This ensures that any side effects of site-wide styles that affect Builder-created content—for example, heading CSS rules—are accurately displayed.

Setting up the Builder preview
To integrate previewing:

Create a single route on your website that serves the Builder preview HTML and JavaScript by creating a new page/endpoint/route on your site called, for example, /builder-preview.
If you name the route something other than /builder-preview, replace /builder-preview in any example code and settings to the path you choose.

Configuring the HTML response
Your framework determines how to create the new route, but the HTML it returns should be similar to the following example:

<builder-component model="PAGE_MODEL_NAME" api-key="YOUR_API_KEY"></builder-component>
<script async src="https://cdn.builder.io/js/webcomponents"></script>

Tip: Make sure to replace the PAGE_MODEL_NAME and API_KEY with the actual values from your Builder space.

For more information, read Using Builder API Keys and Page Models.

Change the PAGE_MODEL_NAME to the Builder model name of the model you want to preview—oftenm, it is page. An alternative and useful approach is to not hardcode the model name, but instead to have it be determined by query parameter in the page URL.

In this way, you can use a single endpoint to preview content from different models, such as /builder-preview?model=page or /builder-preview?model=homepage-section. Here is a pseudocode example:

import layout from '../yourLayoutComponent';
import { builderPublicKey } from '../constants/builder';

const model = requestQueryParams.get('model');

return (
  <layout title="Builder.io Preview page">
    <builder-component name="{model}" api-key={builderPublicKey}>
    </builder-component>
    <script src="https://cdn.builder.io/js/webcomponents" async></script>
  </layout>
);
For more information, read Dynamic Preview URLs.

Setting the Preview URL
Next, set the model Preview URL in Builder:

Go to Models.
Select the model you want to integrate previewing with. Change the preview URL to https://www.yoursite.com/builder-preview (make sure to replace that with your actual website).
Click the Save button.














--------------------------
Rest API Explorer

Rest API Explorer
Use this page to explore the Builder API using your own content and models. For additional information, check out the docs.

Content API

GET
​/api​/v3​/content​/figma-imports
Retrieve content from figma imports entries
Parameters
Cancel
Name	Description
apiKey *
string
(query)
Your public API key from the builder.io/account/organization page

d604fb59150c426298290fd501be6c4e
query
object
(query)
Fetch results that match a subset of your data, based on the query provided. The format is similar to MongoDB style querying of your content based off the response object structure. Using these queries can be a powerful way to get exactly what data you need. For examples of possible query operators, visit the MongoDB query docs

Examples: 
no-queries
{}
userAttributes
object
(query)
A list of user attributes to target certain users in your response. For example, this is useful if you want to target content only shown to desktop users, users with a specific language, or any other user properties. These parameters can be especially powerful when using custom targeting attributes. For more info on creating and using custom targeting for user attributes, check out the docs.

Examples: 
no-specific-user-attributes
{}
limit
number
(query)
Number of results to return

1
offset
number
(query)
Offset the returned results. Useful for paginating results.

offset - Offset the returned results. Useful for paginating results.
fields
array[string]
(query)
Limit the response to only include fields that you specify. This can be useful to limit the amount of data that gets transferred in an API call when you only need a few bits of data.

Examples: 
include-all-fields
Add item
omit
array[string]
(query)
Limit the response to exclude fields that you specify. This acts as the opposite to the fields parameter.

Examples: 
include-all-fields
Add item
includeUnpublished
boolean
(query)
Set to true to include unpublished content in your API response (e.g. for testing)


--
includeRefs
boolean
(query)
Include content of references in response


--
cacheSeconds
number
(query)
Seconds to cache content (sets the max-age of the cache-control header response header). Set it to higher values for better performance, and set it lower for content that will change more frequently

cacheSeconds - Seconds to cache content (sets the max-age of the cache-control header response header). Set it to higher values for better performance, and set it lower for content that will change more frequently
sort
object
(query)
Order results by a given property, use 1 for ascending and -1 for descending

Examples: 
no-sort
{}
Execute
Clear
Responses
Curl
curl -X GET "https://cdn.builder.io/api/v3/content/figma-imports?apiKey=d604fb59150c426298290fd501be6c4e&limit=1" -H "accept: */*"
Request URL
https://cdn.builder.io/api/v3/content/figma-imports?apiKey=d604fb59150c426298290fd501be6c4e&limit=1
Server response
Code	Details
200	
Response body
Download
{
  "results": []
}
Response headers
 cache-control: public, max-age=60, s-maxage=60, stale-if-error=2678400, 
 content-length: 14 
 content-type: application/json; charset=utf-8 
Responses
Code	Description	Links
200	
Success

No links
400	
Bad request

No links
401	
Request failed due to improper authorization

No links
404	
Content not found

No links
5XX	
Unexpected error

No links
GET
​/api​/v3​/content​/page
Retrieve content from page entries
HTML API

GET
​/api​/v3​/html​/figma-imports
Retrieve pre-rendered html from figma imports entries
Parameters
Try it out
Name	Description
url *
string
(query)
The URL for the page you want to render, i.e. the URL that the current visitor to your site is on

https://your-site.com/some-page?and=query
apiKey *
string
(query)
Your public API key from the builder.io/account/organization page

d604fb59150c426298290fd501be6c4e
query
object
(query)
Fetch results that match a subset of your data, based on the query provided. The format is similar to MongoDB style querying of your content based off the response object structure. Using these queries can be a powerful way to get exactly what data you need. For examples of possible query operators, visit the MongoDB query docs

Examples: 
no-queries
{}
userAttributes
object
(query)
A list of user attributes to target certain users in your response. For example, this is useful if you want to target content only shown to desktop users, users with a specific language, or any other user properties. These parameters can be especially powerful when using custom targeting attributes. For more info on creating and using custom targeting for user attributes, check out the docs.

Examples: 
no-specific-user-attributes
{}
limit
number
(query)
Number of results to return

1
offset
number
(query)
Offset the returned results. Useful for paginating results.

offset - Offset the returned results. Useful for paginating results.
fields
array[string]
(query)
Limit the response to only include fields that you specify. This can be useful to limit the amount of data that gets transferred in an API call when you only need a few bits of data.

Examples: 
include-all-fields
omit
array[string]
(query)
Limit the response to exclude fields that you specify. This acts as the opposite to the fields parameter.

Examples: 
include-all-fields
includeUnpublished
boolean
(query)
Set to true to include unpublished content in your API response (e.g. for testing)

Default value : false


--
includeRefs
boolean
(query)
Include content of references in response

Default value : false


--
cacheSeconds
number
(query)
Seconds to cache content (sets the max-age of the cache-control header response header). Set it to higher values for better performance, and set it lower for content that will change more frequently

cacheSeconds - Seconds to cache content (sets the max-age of the cache-control header response header). Set it to higher values for better performance, and set it lower for content that will change more frequently
sort
object
(query)
Order results by a given property, use 1 for ascending and -1 for descending

Examples: 
no-sort
{}
Responses
Code	Description	Links
200	
Success

No links
400	
Bad request

No links
401	
Request failed due to improper authorization

No links
404	
Content not found

No links
5XX	
Unexpected error

No links
GET
​/api​/v3​/html​/page
Retrieve pre-rendered html from page entries









-----------------------------
import { Document, Page, Text, View, StyleSheet, Font } from '@react-pdf/renderer';

// Define interfaces based on the actual JSON structure provided by the user
interface Contact {
  type?: string;
  value?: string;
  label?: string; // Added label based on builder code
  icon?: string; // Added icon based on builder code
}

interface EducationItem {
  degree?: string;
  institution?: string;
  location?: string;
  dates?: string;
  details?: string[];
}

interface ExperienceItem {
  position?: string;
  company?: string;
  location?: string;
  dates?: string;
  highlights?: string[];
  tags?: string[];
}

interface SkillsItem {
  category?: string;
  skills?: string[];
}

interface Section {
  type: string;
  items: any[]; // Use a more specific type if possible, but 'any' for now to be flexible
}

interface ResumeData {
  name?: string;
  title?: string;
  location?: string;
  contacts?: Contact[];
  objective?: string;
  summary?: string;
  experience?: ExperienceItem[];
  education?: EducationItem[];
  skills?: string[]; // Assuming skills is a simple array of strings at the top level based on provided JSON
  certifications?: string[];
  languages?: string[];
  references?: any[]; // Adjust as needed based on actual data structure
  socialLinks?: Contact[]; // Added socialLinks based on builder code structure (using Contact interface for now)
  design?: any; // Keep design field for potential future use, though not directly used for styles here yet
  // Added optional fields to handle potential Groq output structure
  header?: { // Optional header field
    name?: string;
    title?: string;
    location?: string;
    contacts?: Contact[];
  };
  sections?: Section[]; // Optional sections array
}

// Use built-in font Times-Roman
// No need to register custom fonts like Inter here

export function ResumePdfDocument({ resumeData, mode = 'light' }: { resumeData: ResumeData; mode?: string }) {
  // Fallback to empty object if resumeData is null/undefined
  const data = resumeData || {};

  // Define a simple theme based on light/dark mode - can be expanded later
  const theme = mode === 'dark' ? {
    background: '#181926',
    textPrimary: '#f4f4f4',
    textSecondary: '#a1a1aa',
    accent: '#38bdf8',
    sectionBg: '#232946',
    tagBg: '#334155',
    tagText: '#38bdf8',
    border: '#334155',
    headerBg: '#232946', // Solid background for header for simplicity
  } : { // Light mode (default)
    background: '#ffffff',
    textPrimary: '#333333',
    textSecondary: '#555555', // Slightly darker secondary text for better contrast
    accent: '#0066cc', // A slightly darker blue to match the image
    sectionBg: '#f8f8f8', // Keeping a light background for sections if needed, but adjusting education below
    tagBg: '#e0e0e0', // Lighter grey background for tags
    tagText: '#333333', // Dark text for tags
    border: '#cccccc', // Slightly darker border
    headerBg: '#eeeeee', // Solid background for header for simplicity
  };

  const styles = makeStyles(theme);

  // Helper to render sections based on the new flat data structure
  const renderEducation = (education: EducationItem[]) => (
    <View style={styles.section}>
      <Text style={styles.sectionTitle}>Education</Text>
      <View style={styles.sectionLine} />
      <View style={styles.educationList}>
        {(education || []).map((item: EducationItem, i: number) => (
          <View key={i} style={styles.educationItem}>
             {/* Removed logo as we cannot use external images easily */}
            <View>
              <Text style={styles.educationInstitution}>{item.institution || ''}</Text>
              <Text style={styles.educationCourse}>{item.degree || ''}{item.degree && item.dates ? ' | ' : ''}{item.dates || ''}</Text>
              {/* Removed redundant date line */}
              {/* <Text style={styles.educationDate}>{item.dates || ''}</Text> */}
            </View>
          </View>
        ))}
      </View>
    </View>
  );

  const renderExperience = (experience: ExperienceItem[]) => (
    <View style={styles.section}>
      <Text style={styles.sectionTitle}>Experience</Text>
      <View style={styles.sectionLine} />
      {(experience || []).map((item: ExperienceItem, i: number) => (
        <View key={i} style={styles.experienceItem}>
          {/* Left side: Date and Location */}
          <View style={styles.experienceLeft}>
            <Text style={styles.experienceDate}>{item.dates || ''}</Text>
            <Text style={styles.experienceLocation}>{item.location || ''}</Text>
          </View>
          {/* Right side: Role, Company, Description, Tags */}
          <View style={styles.experienceRight}>
             <Text style={styles.experienceRoleCompany}>{item.position || ''}{item.position && item.company ? ' at ' : ''}{item.company || ''}</Text>
            {(item.highlights || []).length > 0 && (
              <View style={styles.highlights}>
                {(item.highlights || []).map((hl: string, j: number) => (
                  <Text key={j} style={styles.highlight}>• {hl}</Text>
                ))}
              </View>
            )}
             {(item.tags || []).length > 0 && (
              <View style={styles.skillsList}>
                {(item.tags || []).map((tag: string, j: number) => (
                  <Text key={j} style={styles.skillTag}>{tag}</Text>
                ))}
              </View>
            )}
          </View>
        </View>
      ))}
    </View>
  );

  const renderSkills = (skills: string[]) => (
    <View style={styles.section}>
      <Text style={styles.sectionTitle}>Skills & Tools</Text>
      <View style={styles.sectionLine} />
       <View style={styles.skillsContent}>
          {/* Skills are a simple array of strings, group them as tags */}
          {(skills || []).map((skill: string, j: number) => (
            <Text key={j} style={styles.skillTag}>{skill}</Text>
          ))}
        </View>
    </View>
  );

    const renderContactInfo = (contacts: Contact[]) => (
        <View style={styles.sidebarSection}>
            <Text style={styles.sidebarSectionTitle}>Contact Info</Text>
             {(contacts || []).map((contact: Contact, i: number) => (
                 // Only render if value exists
                 contact.value ? (
                    <View key={i} style={styles.contactItemSidebar}>
                        {/* Cannot easily use external icons here, just display text */}
                        {/* <Text style={styles.contactItemSidebarLabel}>{contact.label || contact.type || ''}</Text> */}
                        <Text style={styles.contactItemSidebarValue}>{contact.value}</Text>
                    </View>
                 ) : null
            ))}
        </View>
    );

     const renderSocialLinks = (socialLinks: Contact[]) => (
        <View style={styles.sidebarSection}>
            <Text style={styles.sidebarSectionTitle}>Socials</Text>
             {(socialLinks || []).map((link: Contact, i: number) => (
                 // Only render if value (username/url) exists
                 link.value ? (
                    <View key={i} style={styles.contactItemSidebar}>
                         {/* Cannot easily use external icons here, just display text */}
                        {/* <Text style={styles.contactItemSidebarLabel}>{link.label || link.type || ''}</Text> */}
                        <Text style={styles.contactItemSidebarValue}>{link.value}</Text>
                    </View>
                 ) : null
            ))}
        </View>
    );


  // Add similar render functions for other sections (certifications, languages, etc.) if needed

  // Safely access sections and their items
  const educationItems = data.education || data.sections?.find((s: Section) => s.type === 'education')?.items || [];
  const experienceItems = data.experience || data.sections?.find((s: Section) => s.type === 'experience')?.items || [];
  const skillItems = data.skills || data.sections?.find((s: Section) => s.type === 'skills')?.items || [];
  const contactInfoItems = data.contacts || data.header?.contacts || [];
  const socialLinkItems = data.socialLinks || data.sections?.find((s: Section) => s.type === 'social-links')?.items || []; // Assuming social links might be a section



  return (
    <Document>
      <Page style={styles.body}>
        {/* Header Section */}
        <View style={styles.headerBlock}>
          <Text style={styles.name}>{data.name || (data.header?.name || '')}</Text>
          <Text style={styles.title}>{data.title || (data.header?.title || '')}</Text>
          <Text style={styles.location}>{data.location || (data.header?.location || '')}</Text>
          {/* Moved contacts to the sidebar */}
          {/* {(data.contacts || data.header?.contacts || []).length > 0 && (
            <View style={styles.contactRow}>
              {(data.contacts || data.header?.contacts || []).map((c: Contact, i: number) => (
                // Added null/undefined checks for c.value
                c && c.value ? <Text key={i} style={styles.contactItem}>{c.value}</Text> : null
              ))}
            </View>
          )} */}
        </View>

        {/* Main Content: Two Columns */}
        <View style={styles.mainContent}>
          {/* Left Column (Sidebar) */}
          <View style={styles.leftCol}>
               {contactInfoItems.length > 0 && renderContactInfo(contactInfoItems as Contact[])}
               {socialLinkItems.length > 0 && renderSocialLinks(socialLinkItems as Contact[])}
            {/* Add other left column sections here (e.g., Languages, Certifications) */}
          </View>

          {/* Right Column */}
          <View style={styles.rightCol}>
            {/* Check for sections under 'sections' array as well */}
            {experienceItems.length > 0 && renderExperience(experienceItems as ExperienceItem[])}
            {educationItems.length > 0 && renderEducation(educationItems as EducationItem[])}
            {/* Assuming skills might also be under a 'skills' section or directly at the root */}
             {skillItems.length > 0 && renderSkills(skillItems as string[])}
            {/* Add other right column sections here */}
          </View>
        </View>
      </Page>
    </Document>
  );
}

function makeStyles(theme: any) {
  return StyleSheet.create({
    body: {
      padding: 30,
      fontSize: 10, // Base font size
      fontFamily: 'Times-Roman', // Using built-in font
      color: theme.textPrimary,
      backgroundColor: theme.background,
    },
    headerBlock: {
      marginBottom: 25, // Increased margin below header
      paddingBottom: 15,
      borderBottom: `1pt solid ${theme.border}`,
    },
    name: {
      fontSize: 28, // Name font size
      fontWeight: 'bold',
      color: theme.textPrimary,
      marginBottom: 4, // Margin below name
    },
    title: {
      fontSize: 12, // Title font size
      color: theme.textSecondary,
      marginBottom: 4, // Margin below title
    },
    location: {
      fontSize: 10, // Location font size
      color: theme.textSecondary,
      marginBottom: 10, // Increased margin below location
    },
    contactRow: {
      flexDirection: 'row',
      flexWrap: 'wrap',
      gap: 10, // Increased gap between contacts
      marginTop: 5, // Increased margin above contacts
    },
    contactItem: {
      fontSize: 9, // Contact font size
      color: theme.textSecondary,
    },
    mainContent: {
      flexDirection: 'row',
      gap: 30, // Gap between columns
    },
    leftCol: {
      flex: 1.5,
      paddingRight: 15, // Add padding to the right of the left column
      // borderRight: `1pt solid ${theme.border}`, // Example border if needed
    },
    rightCol: {
      flex: 3,
      // paddingLeft: 15,
    },
    section: {
      marginBottom: 20, // Margin below section
    },
    sectionTitle: {
      fontSize: 14, // Section title font size
      fontWeight: 'bold',
      color: theme.accent, // Use accent color for titles
      marginBottom: 4, // Margin below title
    },
     sectionLine: {
      height: 1,
      backgroundColor: theme.accent, // Use accent color for the line
      marginBottom: 10, // Increased margin below line
      width: 50, // Line width
    },
    item: {
      marginBottom: 12, // Margin between items
    },
    itemTitle: {
      fontSize: 10,
      fontWeight: 'bold',
      color: theme.textPrimary,
      marginBottom: 2,
    },
    itemSubtitle: {
      fontSize: 9,
      color: theme.textSecondary,
      marginBottom: 4,
    },
    highlights: {
      marginTop: 4,
      marginBottom: 4,
      paddingLeft: 8, // Indent highlights
    },
    highlight: {
      fontSize: 9,
      color: theme.textPrimary,
      marginBottom: 2, // Space between highlights
    },
    skillsList: {
      flexDirection: 'row',
      flexWrap: 'wrap',
      gap: 6, // Gap between skills
      marginTop: 4,
    },
    skillTag: {
      fontSize: 8,
      backgroundColor: theme.tagBg,
      color: theme.tagText,
      paddingVertical: 2,
      paddingHorizontal: 6,
      borderRadius: 4,
    },
    // Styles for Experience section layout
    experienceItem: {
      flexDirection: 'row',
      marginBottom: 15, // Space between experience items
      gap: 15, // Gap between left and right columns
    },
    experienceLeft: {
      width: 80, // Fixed width for date/location column
      flexShrink: 0,
      // alignItems: 'flex-end', // Align text to the right
    },
    experienceDate: {
      fontSize: 9,
      color: theme.textSecondary,
      marginBottom: 2,
    },
    experienceLocation: {
      fontSize: 9,
      color: theme.textSecondary,
    },
    experienceRight: {
      flexGrow: 1,
    },
    experienceRoleCompany: {
       fontSize: 10,
      fontWeight: 'bold',
      color: theme.textPrimary,
      marginBottom: 2,
    },
     // Styles for Education section layout (adjusted to be a list)
    educationList: {
      gap: 5, // Reduced gap between education items for a list look
    },
    educationItem: {
      // Removed padding and background to match the image list style
      // padding: 8,
      // backgroundColor: theme.sectionBg,
      // borderRadius: 4,
       marginBottom: 5, // Reduced margin between education items
    },
    educationInstitution: {
      fontSize: 10,
      fontWeight: 'bold',
      color: theme.textPrimary,
      marginBottom: 1,
    },
    educationCourse: {
      fontSize: 9,
      color: theme.textSecondary,
      marginBottom: 1,
    },
    educationDate: {
      fontSize: 9,
      color: theme.textSecondary,
    },
    // Styles for Skills section layout
    skillsContent: {
        flexDirection: 'row',
        flexWrap: 'wrap',
        gap: 6, // Gap between skill tags
        marginTop: 4,
    },
    // Styles for Sidebar sections (Contact Info, Socials, etc.)
    sidebarSection: {
        marginBottom: 20, // Space below each sidebar section
    },
     sidebarSectionTitle: {
        fontSize: 12, // Smaller title for sidebar sections
        fontWeight: 'bold',
        color: theme.textPrimary, // Use primary text color for sidebar titles
        marginBottom: 8, // Space below sidebar title
    },
    contactItemSidebar: {
        marginBottom: 8, // Increased space between contact/social items
    },
    contactItemSidebarLabel: {
        fontSize: 9,
        color: theme.textSecondary,
        marginBottom: 2, // Space between label and value
    },
    contactItemSidebarValue: {
        fontSize: 9,
        color: theme.textPrimary,
    },

  });
}
 